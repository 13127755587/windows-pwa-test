{"version":3,"sources":["Pages/History.js","Navs/NavbarTop.js","Pages/Home.js","Pages/UsersTable.js","Pages/Users.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","forceRefresh","url","Navbarfunc","_useState","useState","_useState2","Object","slicedToArray","show","setShow","_useState3","_useState4","username","setUsername","_useState5","_useState6","password","setPassword","react_default","a","createElement","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","ButtonToolbar","Button","onClick","Modal","onHide","animation","size","aria-labelledby","centered","Header","closeButton","Title","Body","Form","Group","controlId","Control","type","placeholder","value","onChange","e","target","Footer","console","log","fetch","method","headers","Accept","content-type","body","JSON","stringify","then","results","status","history","push","window","location","reload","catch","error","NavbarTop","React","Component","Home","UsersTable","_React$useState","_React$useState2","users","setUsers","useEffect","json","map","user","i","key","first_name","email","country_name","city_name","state_name","company_address","Users","App","NavbarTop_NavbarTop","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1327eae8.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory({\r\n    forceRefresh: true\r\n});","import React, { useState } from 'react';\nimport { Navbar, Nav, Button, ButtonToolbar, Modal, Form } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom'\nimport history from '../Pages/History';\n\nlet url = process.env.NODE_ENV === 'development' ? 'http://localhost:5000/api/users' : \"https://windows-pwa-express.azurewebsites.net/api/users\"\n\nfunction Navbarfunc() {\n\tconst [show, setShow] = useState(false);\n\n\tconst handleShow = () => setShow(true);\n\tconst handleClose = () => setShow(false);\n\n\tconst [username, setUsername] = useState('');\n\tconst [password, setPassword] = useState('');\n\n\tconst handleSingin = () => {\n\t\tsetShow(false);\n\t\tconsole.log(username);\n\t\tconsole.log(password);\n\n\t\tfetch(url + '/login', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t\"username\": username,\n\t\t\t\t\"password\": password,\n\t\t\t})\n\t\t})\n\t\t.then(results => {\n\t\t\tconsole.log(results.status);\n\t\t\tif(results.status == 200) {\n\t\t\t\thistory.push('/#/users')\n\t\t\t\twindow.location.reload();\n\t\t\t\t// return <Redirect to='/#/users' />\n\t\t\t} else {\n\t\t\t\thistory.push('/#/home')\n\t\t\t\twindow.location.reload();\n\t\t\t}\n\t\t})\n\t\t.catch((error) => { \n\t\t\tconsole.error(error);\n\t\t});\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n\t\t\t\t<Navbar.Brand href=\"#home\">Express React MongoDB</Navbar.Brand>\n\t\t\t\t<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\t\t\t\t<Navbar.Collapse id=\"responsive-navbar-nav\">\n\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t<Nav.Link href=\"#home\">Home</Nav.Link>\n\t\t\t\t\t\t<Nav.Link href=\"#users\">Users</Nav.Link>\n\t\t\t\t\t</Nav>\n\t\t\t\t\t<Nav>\n\t\t\t\t\t\t<ButtonToolbar>\n\t\t\t\t\t\t\t{/* <Button variant=\"info\" onClick={() => setModalShow(true)}>Signin</Button> */}\n\t\t\t\t\t\t\t<Button variant=\"info\" onClick={handleShow}>Signin</Button>\n\t\t\t\t\t\t\t<Modal show={show} onHide={handleClose} animation={false} size=\"md\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n\t\t\t\t\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t\t\t\t\t\t<Modal.Title>Modal heading</Modal.Title>\n\t\t\t\t\t\t\t\t</Modal.Header>\n\t\t\t\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\t\t\t\t<Form.Group controlId=\"formBasicUsername\">\n\t\t\t\t\t\t\t\t\t\t<Form.Control type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t\t<Form.Group controlId=\"formBasicPassword\">\n\t\t\t\t\t\t\t\t\t\t<Form.Control type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t\t\t\t<Button type='button' variant=\"primary\" onClick={handleSingin}>\n\t\t\t\t\t\t\t\t\t\tGo\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Modal.Footer>\n\t\t\t\t\t\t\t</Modal>\n\t\t\t\t\t\t</ButtonToolbar>\n\t\t\t\t\t\t<ButtonToolbar>\n\t\t\t\t\t\t\t<Button variant=\"light\">Signout</Button>\n\t\t\t\t\t\t</ButtonToolbar>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Navbar.Collapse>\n\t\t\t</Navbar>\n\t\t</div>\n\t);\n}\n\nexport default class NavbarTop extends React.Component {\n\t// constructor(props) {\n\t// \tsuper(props);\n\t// \tthis.state = { value: '' };\n\n\t// \tthis.handleChange = this.handleChange.bind(this);\n\t// \tthis.handleSubmit = this.handleSubmit.bind(this);\n\t// }\n\n\t// handleChange(event) {\n\t// \tthis.setState({ value: event.target.value });\n\t// }\n\n\t// handleSubmit(event) {\n\t// \talert('A name was submitted: ' + this.state.value);\n\t// \tevent.preventDefault();\n\t// }\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbarfunc />\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n","import React, { Component } from 'react';\n\n\nclass Home extends Component{\n    render(){\n        return(\n            <h1>Home page</h1>\n        );\n    }\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react';\n\nexport default function UsersTable() {\n\t// const [state, setState] = React.useState({\n\t// \tcolumns: [{\n\t// \t\ttitle: 'username',\n\t// \t\tfield: 'username'\n\t// \t},\n\t// \t{\n\t// \t\ttitle: 'password',\n\t// \t\tfield: 'password'\n\t// \t},\n\t// \t{\n\t// \t\ttitle: 'email',\n\t// \t\tfield: 'email',\n\t// \t},\n\t// \t{\n\t// \t\ttitle: 'country_name',\n\t// \t\tfield: 'country_name',\n\t// \t},\n\t// \t],\n\t// \tdata: [{\n\t// \t\tusername: 'Mehmet',\n\t// \t\tpassword: 'Baran',\n\t// \t\temail: 1987,\n\t// \t\tcountry_name: 63\n\t// \t},\n\t// \t],\n\t// });\n\n\tlet url = process.env.NODE_ENV === 'development' ? 'http://localhost:5000/api/users' : \"https://windows-pwa-express.azurewebsites.net/api/users\"\n\n\tconst [users, setUsers] = React.useState([]);\n\tReact.useEffect(() => {\n\t\tfetch(url)\n\t\t\t.then(results => results.json())\n\t\t\t.then(users => {\n\t\t\t\tsetUsers(users);\n\t\t\t\t// console.log(users);\n\t\t\t});\n\t}, []);\n\n\tconst renderTable = () => {\n\t\treturn users.map((user, i) => {\n\t\t\t// console.log(user);\n\t\t\t// console.log(user.first_name);\n\t\t\treturn (\n\t\t\t\t<tr key={i}>\n\t\t\t\t\t<td>{user.first_name}</td>\n\t\t\t\t\t<td>{user.email}</td>\n\t\t\t\t\t<td>{user.password}</td>\n\t\t\t\t\t<td>{user.country_name}</td>\n\t\t\t\t\t<td>{user.city_name}</td>\n\t\t\t\t\t<td>{user.state_name}</td>\n\t\t\t\t\t<td>{user.company_address}</td>\n\t\t\t\t</tr>\n\t\t\t)\n\t\t})\n\t}\n\n\t// const renderTable2 = () => {\n\t// \treturn users.map((user, i) => {\n\t// \t\tconsole.log(user);\n\t// \t\tconsole.log(user.first_name);\n\t// \t\treturn (\n\t// \t\t\tuser\n\t// \t\t)\n\t// \t})\n\t// }\n\n\treturn (\n\t\t<div>\n\t\t\t<table id=\"users\" >\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>First_name</th>\n\t\t\t\t\t\t<th>Email</th>\n\t\t\t\t\t\t<th>Password</th>\n\t\t\t\t\t\t<th>Country_name</th>\n\t\t\t\t\t\t<th>city_name</th>\n\t\t\t\t\t\t<th>state_name</th>\n\t\t\t\t\t\t<th>company_address</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>{renderTable()}</tbody>\n\t\t\t</table>\n\t\t\t{/* <MDBDataTable\n\t\t\t\tstriped\n\t\t\t\tbordered\n\t\t\t\thover\n\t\t\t\tdata={renderTable2()}\n\t\t\t/> */}\n\t\t</div>\n\t);\n}","import React, { Component } from 'react';\nimport UsetsTable from './UsersTable';\n\nclass Users extends Component{\n    render(){\n        return(\n            <div>\n                <h1>Users page</h1>\n                <UsetsTable/>\n            </div>\n        );\n    }\n}\n\nexport default Users;","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport './App.css';\n\nimport NavbarTop from './Navs/NavbarTop';\nimport Home from './Pages/Home';\nimport Users from './Pages/Users';\n\nfunction App() {\n  return (\n    <div>\n      <NavbarTop />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/home\" component={Home} />\n        <Route path=\"/users\" component={Users} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// Material-UI\n// https://material-ui.com/getting-started/installation/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport history from './Pages/History';\n\n// import { BrowserRouter } from 'react-router-dom';\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render(\n    <HashRouter history={history}>\n        <App />\n    </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}